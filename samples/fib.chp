func unsigned long fib(unsigned int: n)
{
	unsigned long: a = 0;
	unsigned long: b = 1;
	while n != 0
	{
		const int: tmp = b;
		n = n - 1;
		b = a + b;
		a = tmp;
	}
	ret a;
}

import "io"
namespace io
{
	func none write(ptr const char: str);
	func none print(ptr const char: str);

	# Returns number of chars needed to store the string, including zero-terminator
	func unsigned long ulong_to_string(unsigned long: val, ptr char: str, unsigned long: buflen)
	{
		unsigned long: size = 1;
		unsigned long: _val = val;
		unsigned long: ct = 1;
		unsigned long: idx = 0;
		while _val / ct >= 10
		{
			ct = ct * 10;
			size = size + 1;
		}
		while ct != 1
		{
			if idx == buflen
			{
				ct = 1;
			}
			else
			{
				ct = ct / 10;
				deref(str + idx) = _val / ct + '0';
				_val = _val - _val / ct * ct;
				idx = idx + 1;
			}
		}
		if idx != buflen
		{
			deref(str + idx) = 0;
		}
		ret size + 1;
	}
}

entry
{
	ptr char: small_buf = (alloca 5) as(ptr char);
	unsigned long: buf_size = 5;
	unsigned long: value = fib(5);
	unsigned long: size = io.ulong_to_string(value, small_buf, buf_size);
	if size > buf_size
	{
		buf_size = size;
		small_buf = (alloca buf_size) as(ptr char);
		io.ulong_to_string(value, small_buf, buf_size);
	}
	io.write("Result of fib(5): ");
	io.print(small_buf);
	value = fib(50);
	size = io.ulong_to_string(value, small_buf, buf_size);
	if size > buf_size
	{
		buf_size = size;
		small_buf = (alloca buf_size) as(ptr char);
		io.ulong_to_string(value, small_buf, buf_size);
	}
	io.write("Result of fib(50): ");
	io.print(small_buf);
}
