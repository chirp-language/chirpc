# This file demonstrates various features of the language
# and it's intended to analyse and debug compiler behaviour.

# Import declarations (imports don't work yet)
import "io";
import "mem";
import "math.trig";

namespace mem
{
	extern "malloc"
		func ptr alloc(long: size);
}

namespace io
{
	func none print(ptr const char: string);
}

# External declarations
namespace oslib
{
	extern "dlopen"
		func ptr open_library(ptr const char: name);
	extern "stdout"
		ptr: stream_stdout; # No custom types yet, have to use untyped pointer
}

# Forward function declarations
func ptr const char type_name(int: id);
func ptr const char find_cstr_end(ptr const char); # Unnamed parameters
func none memcpy(ptr: dest, ptr const: src, int: count);

# Functions
func ptr const char type_name(int: id)
{
	# If statements, comparisons, ret
	if id == 0
	{
		ret "none";
	}
	elif id == 1
	{
		ret "int";
	}
	elif id == 2
	{
		ret "bool";
	}
	elif id == 3
	{
		ret "char";
	}
	ret "__unknown";
}

func ptr const char find_cstr_end(ptr const char: s)
{
	# While statements, assignment, pointer increment (TODO: type-check)
	while deref s != 0
	{
		s = s + 1;
	}
	ret s;
}

func none memcpy(ptr: dest, ptr const: src, int: count)
{
	# Pointer convertions (TODO: type-check)
	ptr byte: _dest = dest as ptr char;
	ptr const byte: _src = src as ptr const char;
	# Convert to bool (TODO)
	while count
	{
		# lvalue assignment (TODO)
		deref _dest = deref _src;
		count = count - 1;
	}
}

# Program entry point
entry
{
	# Function calls
	ptr const char: my_string = "hello";
	ptr const char: my_string_end = find_cstr_end(my_string);
	const int: my_string_size = my_string_end - my_string + 2;
	ptr char: my_heap_str = mem.alloc(my_string_size);
	memcpy(my_heap_str, my_string, my_string_size);
	ptr char: a = alloca (3 as long) as(ptr char);
	deref a = 'h';
	deref (a + 1) = 'i';
	deref (a + 2) = 0;
	io.print(my_heap_str);
	io.print(" ");
	io.print(type_name(1));
	io.print(a);
}
