# Declarations
program := top_declaration* ;
top_declaration := entry_decl / import_decl / extern_decl / function_decl ;
entry_decl := "entry" compound_stmt ;
import_decl := "import" T_string ;
extern_decl := "extern" T_string ( function_decl / var_decl ) ";" ;
function_decl := "func" type identifier params_decl (";" | compound_stmt) ;
params_decl := "(" (param ("," param)*)? ")" ;
param := typename (":" identifier)? ;

# Statements
stmt :=
	compound_stmt /
	cond_stmt /
	iter_stmt /
	simple_stmt ;

compound_stmt := "{" stmt* "}" ;

simple_stmt :=
	("ret" expr ";") /
	var_decl /
	assign_stmt /
	(expr ";") /
	";" ;

var_decl := typename ":" identifier ("=" expr) ";" ;
assign_stmt := identifier "=" expr ";" ;
cond_stmt := "if" expr compound_stmt ("elif" expr compound_stmt)* ("else" compound_stmt)?
iter_stmt := "while" expr compound_stmt

# Expressions
expr := expr_primary ((T_expr_op expr_primary) / ("(" arguments ")"))* ;
arguments := ( expr ("," expr)* )? ;
expr_primary := identifier / T_string / T_number / ("(" expr ")") ;
identifier := ( T_identifier "." )* T_identifier ;

# Types
typename := (T_datamod* T_basetype T_datamod*) /
	((!T_datamod:"ptr" T_datamod) T_datamod:"ptr" T_datamod*) ;
